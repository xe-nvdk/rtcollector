interval: 5
flush_interval: 10
max_buffer_size: 5000        # Maximum number of entries to buffer if Redis is unavailable
warn_on_buffer: true
hostname: ''

debug: true
once: false

inputs:
  - linux_cpu
  - linux_mem
  - linux_disk
  - linux_io
  - linux_net
  # - macos_cpu
  # - macos_mem
  # - macos_disk
  # - macos_io
  # - macos_net
  # - docker:
  #     endpoint: "unix:///var/run/docker.sock"
  #     gather_services: false
  #     swarm_enabled: false
  #     container_name_include: []
  #     container_name_exclude: []
  #     container_state_include: []
  #     container_state_exclude: []
  #     docker_label_include: []
  #     docker_label_exclude: []
  #     tag_env: ["JAVA_HOME", "HEAP_SIZE"]
  #     timeout: 5
  # - syslog:
  #     server: "tcp://127.0.0.1:5514"  # Format: protocol://host:port (tcp:// or udp://)
  #     #tls_cert: "/path/to/cert.pem"  # Optional: TLS certificate for secure connections
  #     #tls_key: "/path/to/key.pem"    # Optional: TLS key for secure connections
  #     read_timeout: 30               # Socket read timeout in seconds (0 = no timeout)
  #     read_buffer_size: "64KiB"      # Buffer size (supports KiB, MiB, GiB suffixes)
  #     best_effort: true              # Try simpler parsing if standard parsing fails
  #     syslog_standard: "auto"        # Syslog standard: "RFC5424", "RFC3164", or "auto"
  #     sdparam_separator: "_"         # Separator for structured data parameters
  # - redis:
  #     host: "127.0.0.1"
  #     port: 6379
  #     password: ""
  #     db: 0
  # - mariadb:
  #     host: "127.0.0.1"
  #     port: 3306
  #     user: "monitor"
  #     password: "testpass"
  #     metrics:
  #       - Threads_connected
  #       - Connections
  #       - Uptime
  #       - Questions
  # - exec:
  #     commands:
  #       - "python3 /opt/scripts/report_temp.py"
  #     environment:
  #       - "ENV=production"
  #       - "PATH=/usr/local/bin:/usr/bin"
  #     timeout: 5
  #     data_format: "metrics"  # or "json"
  #     ignore_error: false
  #     working_dir: "/opt/scripts"  # optional working directory
  #     shell: true  # whether to use shell for command execution
  #     max_output_size: 1048576  # limit output size (1MB)
  #     add_hostname: true  # add hostname to metrics
  # - postgres:
  #     host: "127.0.0.1"
  #     port: 5432
  #     user: "monitor"
  #     password: "testpass"
  #     dbname: "postgres"
      # Optional: define custom queries to override default pg_stat_database
      # queries:
      #   - name: "connections"
      #     sql: "SELECT COUNT(*) FROM pg_stat_activity WHERE datname = current_database();"
      #   - name: "uptime"
      #     sql: "SELECT EXTRACT(EPOCH FROM now() - pg_postmaster_start_time())::bigint;"
  # - http_response:
  #     urls:
  #       - "https://cduser.com"
  #     method: "GET"
  #     timeout: 5
  #     follow_redirects: true
  #     headers:
  #       User-Agent: "rtcollector"
  #       Authorization: "Bearer token123"
  #     response_status_code: 200
  #     response_string_match: "healthy"
  #     insecure_skip_verify: false
  # - nginx:
  #     status_url: "http://localhost/nginx_status"  # URL to Nginx stub_status page
  #     timeout: 5  # Request timeout in seconds
  #     basic_auth:  # Optional HTTP Basic Auth
  #       username: "monitor"
  #       password: "password123"
  #     headers:  # Optional custom headers
  #       X-API-Key: "secret-key"
  # - apache:
  #     status_url: "http://localhost/server-status?auto"  # URL to Apache server-status page with ?auto parameter
  #     timeout: 5  # Request timeout in seconds
  #     basic_auth:  # Optional HTTP Basic Auth
  #       username: "monitor"
  #       password: "password123"
  #     headers:  # Optional custom headers
  #       X-API-Key: "secret-key"

outputs:
  - redistimeseries:
      host: atila.taild1b8e.ts.net
      port: 6379
      retention: 1y
  - redissearch:
      host: atila.taild1b8e.ts.net
      port: 6379
      index: "logs_idx"
      key_prefix: "log:"
      # Example proxy configuration for Redis outputs:
      # socks5_proxy: "socks5://username:password@127.0.0.1:1080"
      # socks4_proxy: "socks4://127.0.0.1:1080"
      # http_proxy: "http://username:password@proxy.example.com:8080"